{"remainingRequest":"C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\admin\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\admin\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\admin\\src\\views\\home\\Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\admin\\src\\views\\home\\Home.vue","mtime":1633068819202},{"path":"C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}