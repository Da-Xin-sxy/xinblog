{"remainingRequest":"C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\blog\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\blog\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\blog\\node_modules\\vuetify-loader\\lib\\loader.js??ref--18-0!C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\blog\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\blog\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\blog\\src\\components\\ChatRoom.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\blog\\src\\components\\ChatRoom.vue","mtime":1632568076000},{"path":"C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\blog\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\blog\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\blog\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\xiaoxin\\Desktop\\thatblog2\\blog-master\\blog-vue\\blog\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgUmVjb3JkZXJ4LCB7IEVOQ09ERV9UWVBFIH0gZnJvbSAicmVjb3JkZXJ4IjsKaW1wb3J0IEVtb2ppIGZyb20gIi4vRW1vamkiOwppbXBvcnQgRW1vamlMaXN0IGZyb20gIi4uL2Fzc2V0cy9qcy9lbW9qaSI7CmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7CiAgICBFbW9qaTogRW1vamkKICB9LAogIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQoKSB7CiAgICB2YXIgZWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1lc3NhZ2UiKTsKICAgIGVsZS5zY3JvbGxUb3AgPSBlbGUuc2Nyb2xsSGVpZ2h0OwogIH0sCiAgYmVmb3JlRGVzdHJveTogZnVuY3Rpb24gYmVmb3JlRGVzdHJveSgpIHsKICAgIGNsZWFySW50ZXJ2YWwodGhpcy5oZWFydEJlYXQpOwogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGlzRW1vamk6IGZhbHNlLAogICAgICBpc1Nob3c6IGZhbHNlLAogICAgICB3ZWJzb2NrZXQ6IG51bGwsCiAgICAgIGNvbnRlbnQ6ICIiLAogICAgICBjaGF0UmVjb3JkTGlzdDogW10sCiAgICAgIHZvaWNlTGlzdDogW10sCiAgICAgIHJjOiBudWxsLAogICAgICBpcEFkZHJlc3M6ICIiLAogICAgICBpcFNvdXJjZTogIiIsCiAgICAgIGNvdW50OiAwLAogICAgICB1bnJlYWRDb3VudDogMCwKICAgICAgaXNWb2ljZTogZmFsc2UsCiAgICAgIHZvaWNlQWN0aXZlOiBmYWxzZSwKICAgICAgc3RhcnRWb2ljZVRpbWU6IG51bGwsCiAgICAgIFdlYnNvY2tldE1lc3NhZ2U6IHsKICAgICAgICB0eXBlOiBudWxsLAogICAgICAgIGRhdGE6IG51bGwKICAgICAgfSwKICAgICAgaGVhcnRCZWF0OiBudWxsCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgb3BlbjogZnVuY3Rpb24gb3BlbigpIHsKICAgICAgaWYgKHRoaXMud2Vic29ja2V0ID09IG51bGwpIHsKICAgICAgICB0aGlzLmNvbm5lY3QoKTsKICAgICAgfQoKICAgICAgdGhpcy51bnJlYWRDb3VudCA9IDA7CiAgICAgIHRoaXMuaXNTaG93ID0gIXRoaXMuaXNTaG93OwogICAgfSwKICAgIG9wZW5FbW9qaTogZnVuY3Rpb24gb3BlbkVtb2ppKCkgewogICAgICB0aGlzLmlzRW1vamkgPSAhdGhpcy5pc0Vtb2ppOwogICAgICB0aGlzLmlzVm9pY2UgPSBmYWxzZTsKICAgIH0sCiAgICBjb25uZWN0OiBmdW5jdGlvbiBjb25uZWN0KCkgewogICAgICB2YXIgdGhhdCA9IHRoaXM7CiAgICAgIHRoaXMud2Vic29ja2V0ID0gbmV3IFdlYlNvY2tldCh0aGlzLmJsb2dJbmZvLndlYnNpdGVDb25maWcud2Vic29ja2V0VXJsKTsgLy8g6L+e5o6l5Y+R55Sf6ZSZ6K+v55qE5Zue6LCD5pa55rOVCgogICAgICB0aGlzLndlYnNvY2tldC5vbmVycm9yID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgY29uc29sZS5sb2coZXZlbnQpOwogICAgICAgIGFsZXJ0KCLlpLHotKUiKTsKICAgICAgfTsgLy8g6L+e5o6l5oiQ5Yqf5bu656uL55qE5Zue6LCD5pa55rOVCgoKICAgICAgdGhpcy53ZWJzb2NrZXQub25vcGVuID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgY29uc29sZS5sb2coZXZlbnQpOyAvLyDlj5HpgIHlv4Pot7Pmtojmga8KCiAgICAgICAgdGhhdC5oZWFydEJlYXQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgYmVhdE1lc3NhZ2UgPSB7CiAgICAgICAgICAgIHR5cGU6IDYsCiAgICAgICAgICAgIGRhdGE6ICJwaW5nIgogICAgICAgICAgfTsKICAgICAgICAgIHRoYXQud2Vic29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoYmVhdE1lc3NhZ2UpKTsKICAgICAgICB9LCAzMCAqIDEwMDApOwogICAgICB9OyAvLyDmjqXmlLbliLDmtojmga/nmoTlm57osIPmlrnms5UKCgogICAgICB0aGlzLndlYnNvY2tldC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSk7CgogICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7CiAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgIC8vIOWcqOe6v+S6uuaVsAogICAgICAgICAgICB0aGF0LmNvdW50ID0gZGF0YS5kYXRhOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIC8vIOWOhuWPsuiusOW9lQogICAgICAgICAgICB0aGF0LmNoYXRSZWNvcmRMaXN0ID0gZGF0YS5kYXRhLmNoYXRSZWNvcmRMaXN0OwogICAgICAgICAgICB0aGF0LmNoYXRSZWNvcmRMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09IDUpIHsKICAgICAgICAgICAgICAgIHRoYXQudm9pY2VMaXN0LnB1c2goaXRlbS5pZCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdGhhdC5pcEFkZHJlc3MgPSBkYXRhLmRhdGEuaXBBZGRyZXNzOwogICAgICAgICAgICB0aGF0LmlwU291cmNlID0gZGF0YS5kYXRhLmlwU291cmNlOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIC8vIOaWh+Wtl+a2iOaBrwogICAgICAgICAgICB0aGF0LmNoYXRSZWNvcmRMaXN0LnB1c2goZGF0YS5kYXRhKTsKCiAgICAgICAgICAgIGlmICghdGhhdC5pc1Nob3cpIHsKICAgICAgICAgICAgICB0aGF0LnVucmVhZENvdW50Kys7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgLy8g5pKk5ZueCiAgICAgICAgICAgIGlmIChkYXRhLmRhdGEuaXNWb2ljZSkgewogICAgICAgICAgICAgIHRoYXQudm9pY2VMaXN0LnNwbGljZSh0aGF0LnZvaWNlTGlzdC5pbmRleE9mKGRhdGEuZGF0YS5pZCksIDEpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoYXQuY2hhdFJlY29yZExpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBpZiAodGhhdC5jaGF0UmVjb3JkTGlzdFtpXS5pZCA9PSBkYXRhLmRhdGEuaWQpIHsKICAgICAgICAgICAgICAgIHRoYXQuY2hhdFJlY29yZExpc3Quc3BsaWNlKGksIDEpOwogICAgICAgICAgICAgICAgaS0tOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAvLyDor63pn7Pmtojmga8KICAgICAgICAgICAgdGhhdC52b2ljZUxpc3QucHVzaChkYXRhLmRhdGEuaWQpOwogICAgICAgICAgICB0aGF0LmNoYXRSZWNvcmRMaXN0LnB1c2goZGF0YS5kYXRhKTsKCiAgICAgICAgICAgIGlmICghdGhhdC5pc1Nob3cpIHsKICAgICAgICAgICAgICB0aGF0LnVucmVhZENvdW50Kys7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfTsgLy/ov57mjqXlhbPpl63nmoTlm57osIPmlrnms5UKCgogICAgICB0aGlzLndlYnNvY2tldC5vbmNsb3NlID0gZnVuY3Rpb24gKCkge307CiAgICB9LAogICAgc2F2ZU1lc3NhZ2U6IGZ1bmN0aW9uIHNhdmVNZXNzYWdlKGUpIHsKICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwoKICAgICAgaWYgKHRoaXMuY29udGVudC50cmltKCkgPT0gIiIpIHsKICAgICAgICB0aGlzLiR0b2FzdCh7CiAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgbWVzc2FnZTogIuWGheWuueS4jeiDveS4uuepuiIKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gLy/op6PmnpDooajmg4UKCgogICAgICB2YXIgcmVnID0gL1xbLis/XF0vZzsKICAgICAgdGhpcy5jb250ZW50ID0gdGhpcy5jb250ZW50LnJlcGxhY2UocmVnLCBmdW5jdGlvbiAoc3RyKSB7CiAgICAgICAgcmV0dXJuICI8aW1nIHN0eWxlPSd2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlJyBzcmM9ICciICsgRW1vamlMaXN0W3N0cl0gKyAiJyB3aWR0aD0nMjInaGVpZ2h0PScyMCcgc3R5bGU9J3BhZGRpbmc6IDAgMXB4Jy8+IjsKICAgICAgfSk7CiAgICAgIHZhciBzb2NrZXRNc2cgPSB7CiAgICAgICAgbmlja25hbWU6IHRoaXMubmlja25hbWUsCiAgICAgICAgYXZhdGFyOiB0aGlzLmF2YXRhciwKICAgICAgICBjb250ZW50OiB0aGlzLmNvbnRlbnQsCiAgICAgICAgdXNlcklkOiB0aGlzLnVzZXJJZCwKICAgICAgICB0eXBlOiAzLAogICAgICAgIGlwQWRkcmVzczogdGhpcy5pcEFkZHJlc3MsCiAgICAgICAgaXBTb3VyY2U6IHRoaXMuaXBTb3VyY2UKICAgICAgfTsKICAgICAgdGhpcy5XZWJzb2NrZXRNZXNzYWdlLnR5cGUgPSAzOwogICAgICB0aGlzLldlYnNvY2tldE1lc3NhZ2UuZGF0YSA9IHNvY2tldE1zZzsKICAgICAgdGhpcy53ZWJzb2NrZXQuc2VuZChKU09OLnN0cmluZ2lmeSh0aGlzLldlYnNvY2tldE1lc3NhZ2UpKTsKICAgICAgdGhpcy5jb250ZW50ID0gIiI7CiAgICB9LAogICAgYWRkRW1vamk6IGZ1bmN0aW9uIGFkZEVtb2ppKGtleSkgewogICAgICB0aGlzLmlzRW1vamkgPSBmYWxzZTsKICAgICAgdGhpcy4kcmVmcy5jaGF0SW5wdXQuZm9jdXMoKTsKICAgICAgdGhpcy5jb250ZW50ICs9IGtleTsKICAgIH0sCiAgICAvLyDlsZXnpLroj5zljZUKICAgIHNob3dCYWNrOiBmdW5jdGlvbiBzaG93QmFjayhpdGVtLCBpbmRleCwgZSkgewogICAgICB0aGlzLiRyZWZzLmJhY2tCdG4uZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIGl0ZW0uc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgICAgfSk7CgogICAgICBpZiAoaXRlbS5pcEFkZHJlc3MgPT0gdGhpcy5pcEFkZHJlc3MgfHwgaXRlbS51c2VySWQgIT0gbnVsbCAmJiBpdGVtLnVzZXJJZCA9PSB0aGlzLnVzZXJJZCkgewogICAgICAgIHRoaXMuJHJlZnMuYmFja0J0bltpbmRleF0uc3R5bGUubGVmdCA9IGUub2Zmc2V0WCArICJweCI7CiAgICAgICAgdGhpcy4kcmVmcy5iYWNrQnRuW2luZGV4XS5zdHlsZS5ib3R0b20gPSBlLm9mZnNldFkgKyAicHgiOwogICAgICAgIHRoaXMuJHJlZnMuYmFja0J0bltpbmRleF0uc3R5bGUuZGlzcGxheSA9ICJibG9jayI7CiAgICAgIH0KICAgIH0sCiAgICAvLyDmkqTlm57mtojmga8KICAgIGJhY2s6IGZ1bmN0aW9uIGJhY2soaXRlbSwgaW5kZXgpIHsKICAgICAgdmFyIHNvY2tldE1zZyA9IHsKICAgICAgICBpZDogaXRlbS5pZCwKICAgICAgICBpc1ZvaWNlOiBpdGVtLnR5cGUgPT0gNQogICAgICB9OwogICAgICB0aGlzLldlYnNvY2tldE1lc3NhZ2UudHlwZSA9IDQ7CiAgICAgIHRoaXMuV2Vic29ja2V0TWVzc2FnZS5kYXRhID0gc29ja2V0TXNnOwogICAgICB0aGlzLndlYnNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KHRoaXMuV2Vic29ja2V0TWVzc2FnZSkpOwogICAgICB0aGlzLiRyZWZzLmJhY2tCdG5baW5kZXhdLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICB9LAogICAgY2xvc2VBbGw6IGZ1bmN0aW9uIGNsb3NlQWxsKCkgewogICAgICB0aGlzLmlzRW1vamkgPSBmYWxzZTsKCiAgICAgIGlmICh0aGlzLmNoYXRSZWNvcmRMaXN0Lmxlbmd0aCA+IDApIHsKICAgICAgICB0aGlzLiRyZWZzLmJhY2tCdG4uZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgaXRlbS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgLy8g5b2V6Z+z5byA5aeLCiAgICB0cmFuc2xhdGlvblN0YXJ0OiBmdW5jdGlvbiB0cmFuc2xhdGlvblN0YXJ0KCkgewogICAgICB0aGlzLnZvaWNlQWN0aXZlID0gdHJ1ZTsKICAgICAgdmFyIHRoYXQgPSB0aGlzOwogICAgICB0aGF0LnJjID0gbmV3IFJlY29yZGVyeCgpOwogICAgICB0aGF0LiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhhdC5yYy5zdGFydCgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgdGhhdC5zdGFydFZvaWNlVGltZSA9IG5ldyBEYXRlKCk7CiAgICAgICAgICBjb25zb2xlLmxvZygic3RhcnQgcmVjb3JkaW5nIik7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygiUmVjb3JkaW5nIGZhaWxlZC4iLCBlcnJvcik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOW9lemfs+e7k+adnwogICAgdHJhbnNsYXRpb25FbmQ6IGZ1bmN0aW9uIHRyYW5zbGF0aW9uRW5kKCkgewogICAgICBjb25zb2xlLmxvZygi57uT5p2fIik7CiAgICAgIHRoaXMudm9pY2VBY3RpdmUgPSBmYWxzZTsKICAgICAgdGhpcy5yYy5wYXVzZSgpOwoKICAgICAgaWYgKG5ldyBEYXRlKCkgLSB0aGlzLnN0YXJ0Vm9pY2VUaW1lIDwgMTAwMCkgewogICAgICAgIHRoaXMuJHRvYXN0KHsKICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICBtZXNzYWdlOiAi5oyJ6ZSu5pe26Ze05aSq55+tIgogICAgICAgIH0pOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgdmFyIHdhdiA9IHRoaXMucmMuZ2V0UmVjb3JkKHsKICAgICAgICBlbmNvZGVUbzogRU5DT0RFX1RZUEUuV0FWCiAgICAgIH0pOwogICAgICB2YXIgZmlsZSA9IG5ldyBGaWxlKFt3YXZdLCAidm9pY2Uud2F2IiwgewogICAgICAgIHR5cGU6IHdhdi50eXBlCiAgICAgIH0pOwogICAgICB2YXIgZm9ybURhdGEgPSBuZXcgd2luZG93LkZvcm1EYXRhKCk7CiAgICAgIGZvcm1EYXRhLmFwcGVuZCgiZmlsZSIsIGZpbGUpOwogICAgICBmb3JtRGF0YS5hcHBlbmQoInR5cGUiLCA1KTsKICAgICAgZm9ybURhdGEuYXBwZW5kKCJuaWNrbmFtZSIsIHRoaXMubmlja25hbWUpOwogICAgICBmb3JtRGF0YS5hcHBlbmQoImF2YXRhciIsIHRoaXMuYXZhdGFyKTsKCiAgICAgIGlmICh0aGlzLnVzZXJJZCAhPSBudWxsKSB7CiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCJ1c2VySWQiLCB0aGlzLnVzZXJJZCk7CiAgICAgIH0KCiAgICAgIGZvcm1EYXRhLmFwcGVuZCgiaXBBZGRyZXNzIiwgdGhpcy5pcEFkZHJlc3MpOwogICAgICBmb3JtRGF0YS5hcHBlbmQoImlwU291cmNlIiwgdGhpcy5pcFNvdXJjZSk7CiAgICAgIHZhciBvcHRpb25zID0gewogICAgICAgIHVybDogIi9hcGkvdm9pY2UiLAogICAgICAgIGRhdGE6IGZvcm1EYXRhLAogICAgICAgIG1ldGhvZDogInBvc3QiLAogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICJDb250ZW50LVR5cGUiOiAibXVsdGlwYXJ0L2Zvcm0tZGF0YSIKICAgICAgICB9CiAgICAgIH07CiAgICAgIHRoaXMuYXhpb3Mob3B0aW9ucyk7CiAgICB9LAogICAgdHJhbnNsYXRpb25tb3ZlOiBmdW5jdGlvbiB0cmFuc2xhdGlvbm1vdmUoKSB7fSwKICAgIC8vIOaSreaUvuivremfswogICAgcGxheVZvaWNlOiBmdW5jdGlvbiBwbGF5Vm9pY2UoaXRlbSkgewogICAgICB2YXIgcGxheWVyID0gdGhpcy4kcmVmcy52b2ljZXNbdGhpcy52b2ljZUxpc3QuaW5kZXhPZihpdGVtLmlkKV07CgogICAgICBpZiAocGxheWVyLnBhdXNlZCkgewogICAgICAgIHBsYXllci5wbGF5KCk7CiAgICAgICAgdGhpcy4kcmVmcy5wbGF5c1t0aGlzLnZvaWNlTGlzdC5pbmRleE9mKGl0ZW0uaWQpXS4kZWwuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgICAgICB0aGlzLiRyZWZzLnBhdXNlc1t0aGlzLnZvaWNlTGlzdC5pbmRleE9mKGl0ZW0uaWQpXS4kZWwuc3R5bGUuZGlzcGxheSA9ICJpbmxpbmUtZmxleCI7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy4kcmVmcy5wbGF5c1t0aGlzLnZvaWNlTGlzdC5pbmRleE9mKGl0ZW0uaWQpXS4kZWwuc3R5bGUuZGlzcGxheSA9ICJpbmxpbmUtZmxleCI7CiAgICAgICAgdGhpcy4kcmVmcy5wYXVzZXNbdGhpcy52b2ljZUxpc3QuaW5kZXhPZihpdGVtLmlkKV0uJGVsLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICAgICAgcGxheWVyLnBhdXNlKCk7CiAgICAgIH0KICAgIH0sCiAgICAvLyDor63pn7Pnu5PmnZ8KICAgIGVuZFZvaWNlOiBmdW5jdGlvbiBlbmRWb2ljZShpdGVtKSB7CiAgICAgIHRoaXMuJHJlZnMucGxheXNbdGhpcy52b2ljZUxpc3QuaW5kZXhPZihpdGVtLmlkKV0uJGVsLnN0eWxlLmRpc3BsYXkgPSAiaW5saW5lLWZsZXgiOwogICAgICB0aGlzLiRyZWZzLnBhdXNlc1t0aGlzLnZvaWNlTGlzdC5pbmRleE9mKGl0ZW0uaWQpXS4kZWwuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgIH0sCiAgICAvLyDojrflj5bor63pn7Pml7bplb8KICAgIGdldFZvaWNlVGltZTogZnVuY3Rpb24gZ2V0Vm9pY2VUaW1lKGl0ZW0pIHsKICAgICAgdmFyIHRpbWUgPSB0aGlzLiRyZWZzLnZvaWNlc1t0aGlzLnZvaWNlTGlzdC5pbmRleE9mKGl0ZW0uaWQpXS5kdXJhdGlvbjsKICAgICAgdGltZSA9IE1hdGguY2VpbCh0aW1lKTsKICAgICAgdmFyIHN0ciA9ICLirJ3irJ3irJ0iOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aW1lOyBpKyspIHsKICAgICAgICBpZiAoaSAlIDIgPT0gMCkgewogICAgICAgICAgc3RyICs9ICLirJ0iOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdGhpcy4kcmVmcy52b2ljZVRpbWVzW3RoaXMudm9pY2VMaXN0LmluZGV4T2YoaXRlbS5pZCldLmlubmVySFRNTCA9ICIgIiArIHN0ciArICIgIiArIHRpbWUgKyAiICcnIjsKICAgIH0KICB9LAogIGNvbXB1dGVkOiB7CiAgICBpc1NlbGY6IGZ1bmN0aW9uIGlzU2VsZigpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIGl0ZW0uaXBBZGRyZXNzID09IHRoaXMuaXBBZGRyZXNzIHx8IGl0ZW0udXNlcklkICE9IG51bGwgJiYgaXRlbS51c2VySWQgPT0gdGhpcy51c2VySWQ7CiAgICAgIH07CiAgICB9LAogICAgaXNsZWZ0OiBmdW5jdGlvbiBpc2xlZnQoKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIHJldHVybiB0aGlzLmlzU2VsZihpdGVtKSA/ICJ1c2VyLWF2YXRhciByaWdodC1hdmF0YXIiIDogInVzZXItYXZhdGFyIGxlZnQtYXZhdGFyIjsKICAgICAgfTsKICAgIH0sCiAgICBpc015Q29udGVudDogZnVuY3Rpb24gaXNNeUNvbnRlbnQoKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIHJldHVybiB0aGlzLmlzU2VsZihpdGVtKSA/ICJteS1jb250ZW50IiA6ICJ1c2VyLWNvbnRlbnQiOwogICAgICB9OwogICAgfSwKICAgIGlzTXlNZXNzYWdlOiBmdW5jdGlvbiBpc015TWVzc2FnZSgpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuaXNTZWxmKGl0ZW0pID8gIm15LW1lc3NhZ2UiIDogInVzZXItbWVzc2FnZSI7CiAgICAgIH07CiAgICB9LAogICAgYmxvZ0luZm86IGZ1bmN0aW9uIGJsb2dJbmZvKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuYmxvZ0luZm87CiAgICB9LAogICAgbmlja25hbWU6IGZ1bmN0aW9uIG5pY2tuYW1lKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUubmlja25hbWUgIT0gbnVsbCA/IHRoaXMuJHN0b3JlLnN0YXRlLm5pY2tuYW1lIDogdGhpcy5pcEFkZHJlc3M7CiAgICB9LAogICAgYXZhdGFyOiBmdW5jdGlvbiBhdmF0YXIoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5hdmF0YXIgIT0gbnVsbCA/IHRoaXMuJHN0b3JlLnN0YXRlLmF2YXRhciA6IHRoaXMuJHN0b3JlLnN0YXRlLmJsb2dJbmZvLndlYnNpdGVDb25maWcudG91cmlzdEF2YXRhcjsKICAgIH0sCiAgICB1c2VySWQ6IGZ1bmN0aW9uIHVzZXJJZCgpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnVzZXJJZDsKICAgIH0sCiAgICBpc0lucHV0OiBmdW5jdGlvbiBpc0lucHV0KCkgewogICAgICByZXR1cm4gdGhpcy5jb250ZW50LnRyaW0oKSAhPSAiIiA/ICJpY29uZm9udCBpY29uemhpZmVpamkgc3VibWl0LWJ0biIgOiAiaWNvbmZvbnQgaWNvbnpoaWZlaWppIjsKICAgIH0KICB9Cn07"},null]}