{"remainingRequest":"D:\\Web\\xinblog\\blog-vue\\blog\\node_modules\\thread-loader\\dist\\cjs.js!D:\\Web\\xinblog\\blog-vue\\blog\\node_modules\\babel-loader\\lib\\index.js!D:\\Web\\xinblog\\blog-vue\\blog\\node_modules\\vuetify\\lib\\components\\VNavigationDrawer\\VNavigationDrawer.js","dependencies":[{"path":"D:\\Web\\xinblog\\blog-vue\\blog\\node_modules\\vuetify\\lib\\components\\VNavigationDrawer\\VNavigationDrawer.js","mtime":499162500000},{"path":"D:\\Web\\xinblog\\blog-vue\\blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Web\\xinblog\\blog-vue\\blog\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Web\\xinblog\\blog-vue\\blog\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}