{"remainingRequest":"D:\\Web\\xinblog\\blog-vue\\blog\\node_modules\\thread-loader\\dist\\cjs.js!D:\\Web\\xinblog\\blog-vue\\blog\\node_modules\\babel-loader\\lib\\index.js!D:\\Web\\xinblog\\blog-vue\\blog\\node_modules\\vuetify\\lib\\components\\VCalendar\\mixins\\calendar-with-events.js","dependencies":[{"path":"D:\\Web\\xinblog\\blog-vue\\blog\\node_modules\\vuetify\\lib\\components\\VCalendar\\mixins\\calendar-with-events.js","mtime":499162500000},{"path":"D:\\Web\\xinblog\\blog-vue\\blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Web\\xinblog\\blog-vue\\blog\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Web\\xinblog\\blog-vue\\blog\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiRDpcXFdlYlxceGluYmxvZ1xcYmxvZy12dWVcXGJsb2dcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwovLyBTdHlsZXMKaW1wb3J0ICIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WQ2FsZW5kYXIvbWl4aW5zL2NhbGVuZGFyLXdpdGgtZXZlbnRzLnNhc3MiOyAvLyBEaXJlY3RpdmVzCgppbXBvcnQgcmlwcGxlIGZyb20gJy4uLy4uLy4uL2RpcmVjdGl2ZXMvcmlwcGxlJzsgLy8gTWl4aW5zCgppbXBvcnQgQ2FsZW5kYXJCYXNlIGZyb20gJy4vY2FsZW5kYXItYmFzZSc7IC8vIEhlbHBlcnMKCmltcG9ydCB7IGVzY2FwZUhUTUwgfSBmcm9tICcuLi8uLi8uLi91dGlsL2hlbHBlcnMnOyAvLyBVdGlsCgppbXBvcnQgcHJvcHMgZnJvbSAnLi4vdXRpbC9wcm9wcyc7CmltcG9ydCB7IENhbGVuZGFyRXZlbnRPdmVybGFwTW9kZXMgfSBmcm9tICcuLi9tb2Rlcyc7CmltcG9ydCB7IGdldERheUlkZW50aWZpZXIsIGRpZmZNaW51dGVzIH0gZnJvbSAnLi4vdXRpbC90aW1lc3RhbXAnOwppbXBvcnQgeyBwYXJzZUV2ZW50LCBpc0V2ZW50U3RhcnQsIGlzRXZlbnRPbiwgaXNFdmVudE92ZXJsYXBwaW5nIH0gZnJvbSAnLi4vdXRpbC9ldmVudHMnOwp2YXIgV0lEVEhfRlVMTCA9IDEwMDsKdmFyIFdJRFRIX1NUQVJUID0gOTU7CnZhciBNSU5VVEVTX0lOX0RBWSA9IDE0NDA7Ci8qIEB2dWUvY29tcG9uZW50ICovCgpleHBvcnQgZGVmYXVsdCBDYWxlbmRhckJhc2UuZXh0ZW5kKHsKICBuYW1lOiAnY2FsZW5kYXItd2l0aC1ldmVudHMnLAogIGRpcmVjdGl2ZXM6IHsKICAgIHJpcHBsZTogcmlwcGxlCiAgfSwKICBwcm9wczogcHJvcHMuZXZlbnRzLAogIGNvbXB1dGVkOiB7CiAgICBub0V2ZW50czogZnVuY3Rpb24gbm9FdmVudHMoKSB7CiAgICAgIHJldHVybiB0aGlzLmV2ZW50cy5sZW5ndGggPT09IDA7CiAgICB9LAogICAgcGFyc2VkRXZlbnRzOiBmdW5jdGlvbiBwYXJzZWRFdmVudHMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gdGhpcy5ldmVudHMubWFwKGZ1bmN0aW9uIChpbnB1dCwgaW5kZXgpIHsKICAgICAgICByZXR1cm4gcGFyc2VFdmVudChpbnB1dCwgaW5kZXgsIF90aGlzLmV2ZW50U3RhcnQsIF90aGlzLmV2ZW50RW5kKTsKICAgICAgfSk7CiAgICB9LAogICAgcGFyc2VkRXZlbnRPdmVybGFwVGhyZXNob2xkOiBmdW5jdGlvbiBwYXJzZWRFdmVudE92ZXJsYXBUaHJlc2hvbGQoKSB7CiAgICAgIHJldHVybiBwYXJzZUludCh0aGlzLmV2ZW50T3ZlcmxhcFRocmVzaG9sZCk7CiAgICB9LAogICAgZXZlbnRDb2xvckZ1bmN0aW9uOiBmdW5jdGlvbiBldmVudENvbG9yRnVuY3Rpb24oKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLmV2ZW50Q29sb3IgPT09ICdmdW5jdGlvbicgPyB0aGlzLmV2ZW50Q29sb3IgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF90aGlzMi5ldmVudENvbG9yOwogICAgICB9OwogICAgfSwKICAgIGV2ZW50VGV4dENvbG9yRnVuY3Rpb246IGZ1bmN0aW9uIGV2ZW50VGV4dENvbG9yRnVuY3Rpb24oKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLmV2ZW50VGV4dENvbG9yID09PSAnZnVuY3Rpb24nID8gdGhpcy5ldmVudFRleHRDb2xvciA6IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gX3RoaXMzLmV2ZW50VGV4dENvbG9yOwogICAgICB9OwogICAgfSwKICAgIGV2ZW50TmFtZUZ1bmN0aW9uOiBmdW5jdGlvbiBldmVudE5hbWVGdW5jdGlvbigpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICByZXR1cm4gdHlwZW9mIHRoaXMuZXZlbnROYW1lID09PSAnZnVuY3Rpb24nID8gdGhpcy5ldmVudE5hbWUgOiBmdW5jdGlvbiAoZXZlbnQsIHRpbWVkRXZlbnQpIHsKICAgICAgICB2YXIgbmFtZSA9IGVzY2FwZUhUTUwoZXZlbnQuaW5wdXRbX3RoaXM0LmV2ZW50TmFtZV0pOwoKICAgICAgICBpZiAoZXZlbnQuc3RhcnQuaGFzVGltZSkgewogICAgICAgICAgaWYgKHRpbWVkRXZlbnQpIHsKICAgICAgICAgICAgdmFyIHNob3dTdGFydCA9IGV2ZW50LnN0YXJ0LmhvdXIgPCAxMiAmJiBldmVudC5lbmQuaG91ciA+PSAxMjsKCiAgICAgICAgICAgIHZhciBzdGFydCA9IF90aGlzNC5mb3JtYXRUaW1lKGV2ZW50LnN0YXJ0LCBzaG93U3RhcnQpOwoKICAgICAgICAgICAgdmFyIGVuZCA9IF90aGlzNC5mb3JtYXRUaW1lKGV2ZW50LmVuZCwgdHJ1ZSk7CgogICAgICAgICAgICB2YXIgc2luZ2xpbmUgPSBkaWZmTWludXRlcyhldmVudC5zdGFydCwgZXZlbnQuZW5kKSA8PSBfdGhpczQucGFyc2VkRXZlbnRPdmVybGFwVGhyZXNob2xkOwoKICAgICAgICAgICAgdmFyIHNlcGFyYXRvciA9IHNpbmdsaW5lID8gJywgJyA6ICc8YnI+JzsKICAgICAgICAgICAgcmV0dXJuICI8c3Ryb25nPiIuY29uY2F0KG5hbWUsICI8L3N0cm9uZz4iKS5jb25jYXQoc2VwYXJhdG9yKS5jb25jYXQoc3RhcnQsICIgLSAiKS5jb25jYXQoZW5kKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciB0aW1lID0gX3RoaXM0LmZvcm1hdFRpbWUoZXZlbnQuc3RhcnQsIHRydWUpOwoKICAgICAgICAgICAgcmV0dXJuICI8c3Ryb25nPiIuY29uY2F0KHRpbWUsICI8L3N0cm9uZz4gIikuY29uY2F0KG5hbWUpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG5hbWU7CiAgICAgIH07CiAgICB9LAogICAgZXZlbnRNb2RlRnVuY3Rpb246IGZ1bmN0aW9uIGV2ZW50TW9kZUZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdHlwZW9mIHRoaXMuZXZlbnRPdmVybGFwTW9kZSA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuZXZlbnRPdmVybGFwTW9kZSA6IENhbGVuZGFyRXZlbnRPdmVybGFwTW9kZXNbdGhpcy5ldmVudE92ZXJsYXBNb2RlXTsKICAgIH0sCiAgICBldmVudFdlZWtkYXlzOiBmdW5jdGlvbiBldmVudFdlZWtkYXlzKCkgewogICAgICByZXR1cm4gdGhpcy5wYXJzZWRXZWVrZGF5czsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGZvcm1hdFRpbWU6IGZ1bmN0aW9uIGZvcm1hdFRpbWUod2l0aFRpbWUsIGFtcG0pIHsKICAgICAgdmFyIGZvcm1hdHRlciA9IHRoaXMuZ2V0Rm9ybWF0dGVyKHsKICAgICAgICB0aW1lWm9uZTogJ1VUQycsCiAgICAgICAgaG91cjogJ251bWVyaWMnLAogICAgICAgIG1pbnV0ZTogd2l0aFRpbWUubWludXRlID4gMCA/ICdudW1lcmljJyA6IHVuZGVmaW5lZAogICAgICB9KTsKICAgICAgcmV0dXJuIGZvcm1hdHRlcih3aXRoVGltZSwgdHJ1ZSk7CiAgICB9LAogICAgdXBkYXRlRXZlbnRWaXNpYmlsaXR5OiBmdW5jdGlvbiB1cGRhdGVFdmVudFZpc2liaWxpdHkoKSB7CiAgICAgIGlmICh0aGlzLm5vRXZlbnRzIHx8ICF0aGlzLmV2ZW50TW9yZSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIGV2ZW50SGVpZ2h0ID0gdGhpcy5ldmVudEhlaWdodDsKICAgICAgdmFyIGV2ZW50c01hcCA9IHRoaXMuZ2V0RXZlbnRzTWFwKCk7CgogICAgICBmb3IgKHZhciBkYXRlIGluIGV2ZW50c01hcCkgewogICAgICAgIHZhciBfZXZlbnRzTWFwJGRhdGUgPSBldmVudHNNYXBbZGF0ZV0sCiAgICAgICAgICAgIHBhcmVudCA9IF9ldmVudHNNYXAkZGF0ZS5wYXJlbnQsCiAgICAgICAgICAgIGV2ZW50cyA9IF9ldmVudHNNYXAkZGF0ZS5ldmVudHMsCiAgICAgICAgICAgIG1vcmUgPSBfZXZlbnRzTWFwJGRhdGUubW9yZTsKCiAgICAgICAgaWYgKCFtb3JlKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIHZhciBwYXJlbnRCb3VuZHMgPSBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAgICAgICAgdmFyIGxhc3QgPSBldmVudHMubGVuZ3RoIC0gMTsKICAgICAgICB2YXIgaGlkZSA9IGZhbHNlOwogICAgICAgIHZhciBoaWRkZW4gPSAwOwoKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBsYXN0OyBpKyspIHsKICAgICAgICAgIGlmICghaGlkZSkgewogICAgICAgICAgICB2YXIgZXZlbnRCb3VuZHMgPSBldmVudHNbaV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAgICAgICAgICAgIGhpZGUgPSBpID09PSBsYXN0ID8gZXZlbnRCb3VuZHMuYm90dG9tID4gcGFyZW50Qm91bmRzLmJvdHRvbSA6IGV2ZW50Qm91bmRzLmJvdHRvbSArIGV2ZW50SGVpZ2h0ID4gcGFyZW50Qm91bmRzLmJvdHRvbTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoaGlkZSkgewogICAgICAgICAgICBldmVudHNbaV0uc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgaGlkZGVuKys7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoaGlkZSkgewogICAgICAgICAgbW9yZS5zdHlsZS5kaXNwbGF5ID0gJyc7CiAgICAgICAgICBtb3JlLmlubmVySFRNTCA9IHRoaXMuJHZ1ZXRpZnkubGFuZy50KHRoaXMuZXZlbnRNb3JlVGV4dCwgaGlkZGVuKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgbW9yZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGdldEV2ZW50c01hcDogZnVuY3Rpb24gZ2V0RXZlbnRzTWFwKCkgewogICAgICB2YXIgZXZlbnRzTWFwID0ge307CiAgICAgIHZhciBlbGVtZW50cyA9IHRoaXMuJHJlZnMuZXZlbnRzOwoKICAgICAgaWYgKCFlbGVtZW50cyB8fCAhZWxlbWVudHMuZm9yRWFjaCkgewogICAgICAgIHJldHVybiBldmVudHNNYXA7CiAgICAgIH0KCiAgICAgIGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7CiAgICAgICAgdmFyIGRhdGUgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0ZScpOwoKICAgICAgICBpZiAoZWwucGFyZW50RWxlbWVudCAmJiBkYXRlKSB7CiAgICAgICAgICBpZiAoIShkYXRlIGluIGV2ZW50c01hcCkpIHsKICAgICAgICAgICAgZXZlbnRzTWFwW2RhdGVdID0gewogICAgICAgICAgICAgIHBhcmVudDogZWwucGFyZW50RWxlbWVudCwKICAgICAgICAgICAgICBtb3JlOiBudWxsLAogICAgICAgICAgICAgIGV2ZW50czogW10KICAgICAgICAgICAgfTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoZWwuZ2V0QXR0cmlidXRlKCdkYXRhLW1vcmUnKSkgewogICAgICAgICAgICBldmVudHNNYXBbZGF0ZV0ubW9yZSA9IGVsOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZXZlbnRzTWFwW2RhdGVdLmV2ZW50cy5wdXNoKGVsKTsKICAgICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICcnOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiBldmVudHNNYXA7CiAgICB9LAogICAgZ2VuRGF5RXZlbnQ6IGZ1bmN0aW9uIGdlbkRheUV2ZW50KF9yZWYsIGRheSkgewogICAgICB2YXIgZXZlbnQgPSBfcmVmLmV2ZW50OwogICAgICB2YXIgZXZlbnRIZWlnaHQgPSB0aGlzLmV2ZW50SGVpZ2h0OwogICAgICB2YXIgZXZlbnRNYXJnaW5Cb3R0b20gPSB0aGlzLmV2ZW50TWFyZ2luQm90dG9tOwogICAgICB2YXIgZGF5SWRlbnRpZmllciA9IGdldERheUlkZW50aWZpZXIoZGF5KTsKICAgICAgdmFyIHdlZWsgPSBkYXkud2VlazsKICAgICAgdmFyIHN0YXJ0ID0gZGF5SWRlbnRpZmllciA9PT0gZXZlbnQuc3RhcnRJZGVudGlmaWVyOwogICAgICB2YXIgZW5kID0gZGF5SWRlbnRpZmllciA9PT0gZXZlbnQuZW5kSWRlbnRpZmllcjsKICAgICAgdmFyIHdpZHRoID0gV0lEVEhfU1RBUlQ7CgogICAgICBmb3IgKHZhciBpID0gZGF5LmluZGV4ICsgMTsgaSA8IHdlZWsubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgd2Vla2RheUlkZW50aWZpZXIgPSBnZXREYXlJZGVudGlmaWVyKHdlZWtbaV0pOwoKICAgICAgICBpZiAoZXZlbnQuZW5kSWRlbnRpZmllciA+PSB3ZWVrZGF5SWRlbnRpZmllcikgewogICAgICAgICAgd2lkdGggKz0gV0lEVEhfRlVMTDsKCiAgICAgICAgICBpZiAod2Vla2RheUlkZW50aWZpZXIgPT09IGV2ZW50LmVuZElkZW50aWZpZXIpIHsKICAgICAgICAgICAgZW5kID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgZW5kID0gdHJ1ZTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdmFyIHNjb3BlID0gewogICAgICAgIGV2ZW50OiBldmVudC5pbnB1dCwKICAgICAgICBkYXk6IGRheSwKICAgICAgICBvdXRzaWRlOiBkYXkub3V0c2lkZSwKICAgICAgICBzdGFydDogc3RhcnQsCiAgICAgICAgZW5kOiBlbmQsCiAgICAgICAgdGltZWQ6IGZhbHNlCiAgICAgIH07CiAgICAgIHJldHVybiB0aGlzLmdlbkV2ZW50KGV2ZW50LCBzY29wZSwgZmFsc2UsIHsKICAgICAgICBzdGF0aWNDbGFzczogJ3YtZXZlbnQnLAogICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAndi1ldmVudC1zdGFydCc6IHN0YXJ0LAogICAgICAgICAgJ3YtZXZlbnQtZW5kJzogZW5kCiAgICAgICAgfSwKICAgICAgICBzdHlsZTogewogICAgICAgICAgaGVpZ2h0OiAiIi5jb25jYXQoZXZlbnRIZWlnaHQsICJweCIpLAogICAgICAgICAgd2lkdGg6ICIiLmNvbmNhdCh3aWR0aCwgIiUiKSwKICAgICAgICAgICdtYXJnaW4tYm90dG9tJzogIiIuY29uY2F0KGV2ZW50TWFyZ2luQm90dG9tLCAicHgiKQogICAgICAgIH0sCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICdkYXRhLWRhdGUnOiBkYXkuZGF0ZQogICAgICAgIH0sCiAgICAgICAga2V5OiBldmVudC5pbmRleCwKICAgICAgICByZWY6ICdldmVudHMnLAogICAgICAgIHJlZkluRm9yOiB0cnVlCiAgICAgIH0pOwogICAgfSwKICAgIGdlblRpbWVkRXZlbnQ6IGZ1bmN0aW9uIGdlblRpbWVkRXZlbnQoX3JlZjIsIGRheSkgewogICAgICB2YXIgZXZlbnQgPSBfcmVmMi5ldmVudCwKICAgICAgICAgIGxlZnQgPSBfcmVmMi5sZWZ0LAogICAgICAgICAgd2lkdGggPSBfcmVmMi53aWR0aDsKICAgICAgdmFyIGRheUlkZW50aWZpZXIgPSBnZXREYXlJZGVudGlmaWVyKGRheSk7CiAgICAgIHZhciBzdGFydCA9IGV2ZW50LnN0YXJ0SWRlbnRpZmllciA+PSBkYXlJZGVudGlmaWVyOwogICAgICB2YXIgZW5kID0gZXZlbnQuZW5kSWRlbnRpZmllciA+IGRheUlkZW50aWZpZXI7CiAgICAgIHZhciB0b3AgPSBzdGFydCA/IGRheS50aW1lVG9ZKGV2ZW50LnN0YXJ0KSA6IDA7CiAgICAgIHZhciBib3R0b20gPSBlbmQgPyBkYXkudGltZVRvWShNSU5VVEVTX0lOX0RBWSkgOiBkYXkudGltZVRvWShldmVudC5lbmQpOwogICAgICB2YXIgaGVpZ2h0ID0gTWF0aC5tYXgodGhpcy5ldmVudEhlaWdodCwgYm90dG9tIC0gdG9wKTsKICAgICAgdmFyIHNjb3BlID0gewogICAgICAgIGV2ZW50OiBldmVudC5pbnB1dCwKICAgICAgICBkYXk6IGRheSwKICAgICAgICBvdXRzaWRlOiBkYXkub3V0c2lkZSwKICAgICAgICBzdGFydDogc3RhcnQsCiAgICAgICAgZW5kOiBlbmQsCiAgICAgICAgdGltZWQ6IHRydWUKICAgICAgfTsKICAgICAgcmV0dXJuIHRoaXMuZ2VuRXZlbnQoZXZlbnQsIHNjb3BlLCB0cnVlLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICd2LWV2ZW50LXRpbWVkJywKICAgICAgICBzdHlsZTogewogICAgICAgICAgdG9wOiAiIi5jb25jYXQodG9wLCAicHgiKSwKICAgICAgICAgIGhlaWdodDogIiIuY29uY2F0KGhlaWdodCwgInB4IiksCiAgICAgICAgICBsZWZ0OiAiIi5jb25jYXQobGVmdCwgIiUiKSwKICAgICAgICAgIHdpZHRoOiAiIi5jb25jYXQod2lkdGgsICIlIikKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGdlbkV2ZW50OiBmdW5jdGlvbiBnZW5FdmVudChldmVudCwgc2NvcGUsIHRpbWVkRXZlbnQsIGRhdGEpIHsKICAgICAgdmFyIHNsb3QgPSB0aGlzLiRzY29wZWRTbG90cy5ldmVudDsKICAgICAgdmFyIHRleHQgPSB0aGlzLmV2ZW50VGV4dENvbG9yRnVuY3Rpb24oZXZlbnQuaW5wdXQpOwogICAgICB2YXIgYmFja2dyb3VuZCA9IHRoaXMuZXZlbnRDb2xvckZ1bmN0aW9uKGV2ZW50LmlucHV0KTsKICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHRoaXMuc2V0VGV4dENvbG9yKHRleHQsIHRoaXMuc2V0QmFja2dyb3VuZENvbG9yKGJhY2tncm91bmQsIF9vYmplY3RTcHJlYWQoewogICAgICAgIG9uOiB0aGlzLmdldERlZmF1bHRNb3VzZUV2ZW50SGFuZGxlcnMoJzpldmVudCcsIGZ1bmN0aW9uIChuYXRpdmVFdmVudCkgewogICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHNjb3BlLCB7CiAgICAgICAgICAgIG5hdGl2ZUV2ZW50OiBuYXRpdmVFdmVudAogICAgICAgICAgfSk7CiAgICAgICAgfSksCiAgICAgICAgZGlyZWN0aXZlczogW3sKICAgICAgICAgIG5hbWU6ICdyaXBwbGUnLAogICAgICAgICAgdmFsdWU6IHRoaXMuZXZlbnRSaXBwbGUgIT0gbnVsbCA/IHRoaXMuZXZlbnRSaXBwbGUgOiB0cnVlCiAgICAgICAgfV0KICAgICAgfSwgZGF0YSkpKSwgc2xvdCA/IHNsb3Qoc2NvcGUpIDogW3RoaXMuZ2VuTmFtZShldmVudCwgdGltZWRFdmVudCldKTsKICAgIH0sCiAgICBnZW5OYW1lOiBmdW5jdGlvbiBnZW5OYW1lKGV2ZW50LCB0aW1lZEV2ZW50KSB7CiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCdkaXYnLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICdwbC0xJywKICAgICAgICBkb21Qcm9wczogewogICAgICAgICAgaW5uZXJIVE1MOiB0aGlzLmV2ZW50TmFtZUZ1bmN0aW9uKGV2ZW50LCB0aW1lZEV2ZW50KQogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgZ2VuUGxhY2Vob2xkZXI6IGZ1bmN0aW9uIGdlblBsYWNlaG9sZGVyKGRheSkgewogICAgICB2YXIgaGVpZ2h0ID0gdGhpcy5ldmVudEhlaWdodCArIHRoaXMuZXZlbnRNYXJnaW5Cb3R0b207CiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCdkaXYnLCB7CiAgICAgICAgc3R5bGU6IHsKICAgICAgICAgIGhlaWdodDogIiIuY29uY2F0KGhlaWdodCwgInB4IikKICAgICAgICB9LAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAnZGF0YS1kYXRlJzogZGF5LmRhdGUKICAgICAgICB9LAogICAgICAgIHJlZjogJ2V2ZW50cycsCiAgICAgICAgcmVmSW5Gb3I6IHRydWUKICAgICAgfSk7CiAgICB9LAogICAgZ2VuTW9yZTogZnVuY3Rpb24gZ2VuTW9yZShkYXkpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICB2YXIgZXZlbnRIZWlnaHQgPSB0aGlzLmV2ZW50SGVpZ2h0OwogICAgICB2YXIgZXZlbnRNYXJnaW5Cb3R0b20gPSB0aGlzLmV2ZW50TWFyZ2luQm90dG9tOwogICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgnZGl2JywgewogICAgICAgIHN0YXRpY0NsYXNzOiAndi1ldmVudC1tb3JlIHBsLTEnLAogICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAndi1vdXRzaWRlJzogZGF5Lm91dHNpZGUKICAgICAgICB9LAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAnZGF0YS1kYXRlJzogZGF5LmRhdGUsCiAgICAgICAgICAnZGF0YS1tb3JlJzogMQogICAgICAgIH0sCiAgICAgICAgZGlyZWN0aXZlczogW3sKICAgICAgICAgIG5hbWU6ICdyaXBwbGUnLAogICAgICAgICAgdmFsdWU6IHRoaXMuZXZlbnRSaXBwbGUgIT0gbnVsbCA/IHRoaXMuZXZlbnRSaXBwbGUgOiB0cnVlCiAgICAgICAgfV0sCiAgICAgICAgb246IHsKICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiBjbGljaygpIHsKICAgICAgICAgICAgcmV0dXJuIF90aGlzNS4kZW1pdCgnY2xpY2s6bW9yZScsIGRheSk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBzdHlsZTogewogICAgICAgICAgZGlzcGxheTogJ25vbmUnLAogICAgICAgICAgaGVpZ2h0OiAiIi5jb25jYXQoZXZlbnRIZWlnaHQsICJweCIpLAogICAgICAgICAgJ21hcmdpbi1ib3R0b20nOiAiIi5jb25jYXQoZXZlbnRNYXJnaW5Cb3R0b20sICJweCIpCiAgICAgICAgfSwKICAgICAgICByZWY6ICdldmVudHMnLAogICAgICAgIHJlZkluRm9yOiB0cnVlCiAgICAgIH0pOwogICAgfSwKICAgIGdldFZpc2libGVFdmVudHM6IGZ1bmN0aW9uIGdldFZpc2libGVFdmVudHMoKSB7CiAgICAgIHZhciBzdGFydCA9IGdldERheUlkZW50aWZpZXIodGhpcy5kYXlzWzBdKTsKICAgICAgdmFyIGVuZCA9IGdldERheUlkZW50aWZpZXIodGhpcy5kYXlzW3RoaXMuZGF5cy5sZW5ndGggLSAxXSk7CiAgICAgIHJldHVybiB0aGlzLnBhcnNlZEV2ZW50cy5maWx0ZXIoZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgcmV0dXJuIGlzRXZlbnRPdmVybGFwcGluZyhldmVudCwgc3RhcnQsIGVuZCk7CiAgICAgIH0pOwogICAgfSwKICAgIGdldEV2ZW50c0ZvckRheTogZnVuY3Rpb24gZ2V0RXZlbnRzRm9yRGF5KGRheSkgewogICAgICB2YXIgaWRlbnRpZmllciA9IGdldERheUlkZW50aWZpZXIoZGF5KTsKICAgICAgdmFyIGZpcnN0V2Vla2RheSA9IHRoaXMuZXZlbnRXZWVrZGF5c1swXTsKICAgICAgcmV0dXJuIHRoaXMucGFyc2VkRXZlbnRzLmZpbHRlcihmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICByZXR1cm4gaXNFdmVudFN0YXJ0KGV2ZW50LCBkYXksIGlkZW50aWZpZXIsIGZpcnN0V2Vla2RheSk7CiAgICAgIH0pOwogICAgfSwKICAgIGdldEV2ZW50c0ZvckRheUFsbDogZnVuY3Rpb24gZ2V0RXZlbnRzRm9yRGF5QWxsKGRheSkgewogICAgICB2YXIgaWRlbnRpZmllciA9IGdldERheUlkZW50aWZpZXIoZGF5KTsKICAgICAgdmFyIGZpcnN0V2Vla2RheSA9IHRoaXMuZXZlbnRXZWVrZGF5c1swXTsKICAgICAgcmV0dXJuIHRoaXMucGFyc2VkRXZlbnRzLmZpbHRlcihmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICByZXR1cm4gZXZlbnQuYWxsRGF5ICYmIGlzRXZlbnRTdGFydChldmVudCwgZGF5LCBpZGVudGlmaWVyLCBmaXJzdFdlZWtkYXkpOwogICAgICB9KTsKICAgIH0sCiAgICBnZXRFdmVudHNGb3JEYXlUaW1lZDogZnVuY3Rpb24gZ2V0RXZlbnRzRm9yRGF5VGltZWQoZGF5KSB7CiAgICAgIHZhciBpZGVudGlmaWVyID0gZ2V0RGF5SWRlbnRpZmllcihkYXkpOwogICAgICByZXR1cm4gdGhpcy5wYXJzZWRFdmVudHMuZmlsdGVyKGZ1bmN0aW9uIChldmVudCkgewogICAgICAgIHJldHVybiAhZXZlbnQuYWxsRGF5ICYmIGlzRXZlbnRPbihldmVudCwgaWRlbnRpZmllcik7CiAgICAgIH0pOwogICAgfSwKICAgIGdldFNjb3BlZFNsb3RzOiBmdW5jdGlvbiBnZXRTY29wZWRTbG90cygpIHsKICAgICAgdmFyIF90aGlzNiA9IHRoaXM7CgogICAgICBpZiAodGhpcy5ub0V2ZW50cykgewogICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLiRzY29wZWRTbG90cyk7CiAgICAgIH0KCiAgICAgIHZhciBtb2RlID0gdGhpcy5ldmVudE1vZGVGdW5jdGlvbih0aGlzLnBhcnNlZEV2ZW50cywgdGhpcy5ldmVudFdlZWtkYXlzWzBdLCB0aGlzLnBhcnNlZEV2ZW50T3ZlcmxhcFRocmVzaG9sZCk7CgogICAgICB2YXIgZ2V0U2xvdENoaWxkcmVuID0gZnVuY3Rpb24gZ2V0U2xvdENoaWxkcmVuKGRheSwgZ2V0dGVyLCBtYXBwZXIsIHRpbWVkKSB7CiAgICAgICAgdmFyIGV2ZW50cyA9IGdldHRlcihkYXkpOwoKICAgICAgICBpZiAoZXZlbnRzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdmFyIHZpc3VhbHMgPSBtb2RlKGRheSwgZXZlbnRzLCB0aW1lZCk7CgogICAgICAgIGlmICh0aW1lZCkgewogICAgICAgICAgcmV0dXJuIHZpc3VhbHMubWFwKGZ1bmN0aW9uICh2aXN1YWwpIHsKICAgICAgICAgICAgcmV0dXJuIG1hcHBlcih2aXN1YWwsIGRheSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIHZhciBjaGlsZHJlbiA9IFtdOwogICAgICAgIHZpc3VhbHMuZm9yRWFjaChmdW5jdGlvbiAodmlzdWFsLCBpbmRleCkgewogICAgICAgICAgd2hpbGUgKGNoaWxkcmVuLmxlbmd0aCA8IHZpc3VhbC5jb2x1bW4pIHsKICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChfdGhpczYuZ2VuUGxhY2Vob2xkZXIoZGF5KSk7CiAgICAgICAgICB9CgogICAgICAgICAgY2hpbGRyZW4ucHVzaChtYXBwZXIodmlzdWFsLCBkYXkpKTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gY2hpbGRyZW47CiAgICAgIH07CgogICAgICB2YXIgc2xvdHMgPSB0aGlzLiRzY29wZWRTbG90czsKICAgICAgdmFyIHNsb3REYXkgPSBzbG90cy5kYXk7CiAgICAgIHZhciBzbG90RGF5SGVhZGVyID0gc2xvdHNbJ2RheS1oZWFkZXInXTsKICAgICAgdmFyIHNsb3REYXlCb2R5ID0gc2xvdHNbJ2RheS1ib2R5J107CiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzbG90cywgewogICAgICAgIGRheTogZnVuY3Rpb24gZGF5KF9kYXkpIHsKICAgICAgICAgIHZhciBjaGlsZHJlbiA9IGdldFNsb3RDaGlsZHJlbihfZGF5LCBfdGhpczYuZ2V0RXZlbnRzRm9yRGF5LCBfdGhpczYuZ2VuRGF5RXZlbnQsIGZhbHNlKTsKCiAgICAgICAgICBpZiAoY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoID4gMCAmJiBfdGhpczYuZXZlbnRNb3JlKSB7CiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goX3RoaXM2Lmdlbk1vcmUoX2RheSkpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChzbG90RGF5KSB7CiAgICAgICAgICAgIHZhciBzbG90ID0gc2xvdERheShfZGF5KTsKCiAgICAgICAgICAgIGlmIChzbG90KSB7CiAgICAgICAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbiA/IGNoaWxkcmVuLmNvbmNhdChzbG90KSA6IHNsb3Q7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gY2hpbGRyZW47CiAgICAgICAgfSwKICAgICAgICAnZGF5LWhlYWRlcic6IGZ1bmN0aW9uIGRheUhlYWRlcihkYXkpIHsKICAgICAgICAgIHZhciBjaGlsZHJlbiA9IGdldFNsb3RDaGlsZHJlbihkYXksIF90aGlzNi5nZXRFdmVudHNGb3JEYXlBbGwsIF90aGlzNi5nZW5EYXlFdmVudCwgZmFsc2UpOwoKICAgICAgICAgIGlmIChzbG90RGF5SGVhZGVyKSB7CiAgICAgICAgICAgIHZhciBzbG90ID0gc2xvdERheUhlYWRlcihkYXkpOwoKICAgICAgICAgICAgaWYgKHNsb3QpIHsKICAgICAgICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuID8gY2hpbGRyZW4uY29uY2F0KHNsb3QpIDogc2xvdDsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBjaGlsZHJlbjsKICAgICAgICB9LAogICAgICAgICdkYXktYm9keSc6IGZ1bmN0aW9uIGRheUJvZHkoZGF5KSB7CiAgICAgICAgICB2YXIgZXZlbnRzID0gZ2V0U2xvdENoaWxkcmVuKGRheSwgX3RoaXM2LmdldEV2ZW50c0ZvckRheVRpbWVkLCBfdGhpczYuZ2VuVGltZWRFdmVudCwgdHJ1ZSk7CiAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBbX3RoaXM2LiRjcmVhdGVFbGVtZW50KCdkaXYnLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAndi1ldmVudC10aW1lZC1jb250YWluZXInCiAgICAgICAgICB9LCBldmVudHMpXTsKCiAgICAgICAgICBpZiAoc2xvdERheUJvZHkpIHsKICAgICAgICAgICAgdmFyIHNsb3QgPSBzbG90RGF5Qm9keShkYXkpOwoKICAgICAgICAgICAgaWYgKHNsb3QpIHsKICAgICAgICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmNvbmNhdChzbG90KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBjaGlsZHJlbjsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0KfSk7"},null]}